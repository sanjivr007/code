package com.ail.transporter.code.controller;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.ail.transporter.code.multipart.MultipartUpload;
import com.ail.transporter.code.request.ProducerRequest;
import com.ail.transporter.code.response.ProducerResponse;
import com.ail.transporter.code.service.ServiceSendMessage;
import com.ail.transporter.code.service.worker.ServiceWorker;
import com.ail.transporter.service.impl.RequestLogServiceImpl;
import com.ail.transporter.web.rest.dto.RequestLogTotalCount;
import com.codahale.metrics.annotation.ExceptionMetered;
import com.codahale.metrics.annotation.Timed;

@RestController
@RequestMapping(value = "/api", produces = MediaType.APPLICATION_JSON_VALUE)
public class MessageController {

	private final Logger log = LoggerFactory.getLogger(MessageController.class);

	@Inject
	private ServiceSendMessage serviceSendMessage;

	@Inject
	private MultipartUpload multipartUpload;

	@Inject
	private RequestLogServiceImpl requestLogServiceImpl;
	
	

	/**
	 * Created by Sanjiv Ranjan .
	 *
	 * @throws Exception
	 */
	@RequestMapping(value = "/v2/{type}/sendMessage", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE)
	@Timed
	@ExceptionMetered
	public ResponseEntity<ProducerResponse> sendMessage(@Valid @RequestBody ProducerRequest producerRequest,
			@PathVariable String type) throws Exception {
		long dtr = System.currentTimeMillis();
		ProducerResponse producerResponse = serviceSendMessage.sendMessage(producerRequest);
		
		long end = System.currentTimeMillis();
		log.info("end-dtr  in main function " + (end - dtr));

		if (producerRequest.isValidateTemplate() && producerResponse.isTemplateValidated()) {

			return ResponseEntity.ok().body(producerResponse);

		} else {

			return ResponseEntity.badRequest().body(producerResponse);
		}

	}

	@RequestMapping(value = "/v2/uploadOnBucket", method = RequestMethod.POST)
	@Timed
	@ExceptionMetered
	public ResponseEntity<Map<String, String>> sendMessageWithAttachments(@RequestPart("file") MultipartFile[] files) {

		// System.out.println("testing testing ");

		return ResponseEntity.ok().body(multipartUpload.uploadMultipartfile(files));

	}

	/*
	 * @RequestMapping(value = "/v2/checks3url", method = RequestMethod.GET)
	 * 
	 * @Timed public Map<String, String> checkUrl() {
	 * 
	 * System.out.println("testing testing ");
	 * 
	 * String size = ApplicationProperties.getCustomProperty(
	 * "transactional_email.mailgun.fileSize"); System.out.println(size); int
	 * msize = Integer.parseInt(size);
	 * 
	 * long a = 10;
	 * 
	 * System.out.println(a>msize); // multipartUpload.downloadFromS3(url);
	 * 
	 * return null;
	 * 
	 * }
	 */

	@RequestMapping(value = "/v2/{type}/countMessage", method = RequestMethod.POST, consumes = MediaType.APPLICATION_JSON_VALUE, produces=MediaType.APPLICATION_JSON_VALUE)
	@Timed
	@ExceptionMetered
	public List<RequestLogTotalCount> countMessages(@RequestParam("day") String day) throws Exception {
		log.debug("controller comes here");
		return requestLogServiceImpl.countMessages(day);
	}
}