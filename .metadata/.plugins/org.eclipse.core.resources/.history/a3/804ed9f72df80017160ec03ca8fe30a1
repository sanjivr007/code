package allPossibleWords;

import java.util.Scanner;

public class Max {
	public static int min(int a ,int b){
		return a<b?a:b;
	}
	
	public static void main(String args[]) {
		Scanner s = new Scanner(System.in);
		
		String no = s.nextLine(); 
		int swapcount = s.nextInt(); 
		
		System.out.println(no+" "+swapcount);
		
		int maxno= getMaxNo(String no,int swapcount);
		
		/*for(int i=0;i<min(no.length(),swap);i++){
			
			
		}*/
		
		
	}
	
	public int getMaxNo(String no,int swapcount){
		
	}
	
	void findMaximumNum(String str, int k, string& max)
	{
	    // return if no swaps left
	    if(k == 0)
	        return;
	 
	    int n = str.length();
	     
	    // consider every digit
	    for (int i = 0; i < n - 1; i++)
	    {
	      
	        // and compare it with all digits after it
	        for (int j = i + 1; j < n; j++)
	        {
	            // if digit at position i is less than digit
	            // at position j, swap it and check for maximum
	            // number so far and recurse for remaining swaps
	            if (str[i] < str[j])
	            {
	                // swap str[i] with str[j]
	                swap(str[i], str[j]);
	 
	                // If current num is more than maximum so far
	                if (str.compare(max) > 0)
	                    max = str;
	 
	                // recurse of the other k - 1 swaps
	                findMaximumNum(str, k - 1, max);
	 
	                // backtrack
	                swap(str[i], str[j]);
	            }
	        }
	    }
	}
	
	
	
	
	

}
