package com.ail.notification.code;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.Optional;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.ail.notification.code.request.RecordRequestBody;
import com.ail.notification.code.request.RecordRequestValidator;
import com.ail.notification.code.service.RecordService;
import com.ail.notification.domain.Record;
import com.ail.notification.domain.User;
import com.ail.notification.service.RecordServiceDB;
import com.ail.notification.service.UserService;

import com.ail.notification.web.rest.util.HeaderUtil;

import com.codahale.metrics.annotation.Timed;

@RestController
@RequestMapping("/api")
public class Controller {

	private final UserService userService;

	private static final String ENTITY_NAME = "Records";

	@Autowired
	private RecordService recordService;

	@Autowired
	private RecordServiceDB recordServiceDB;

	@InitBinder
	void initbinder(WebDataBinder binder) {
		binder.setValidator(new RecordRequestValidator());

	}

	public Controller(UserService userService) {
		this.userService = userService;
	}

	@GetMapping("/getnotification/{deviceId}")
	@Timed
	public ResponseEntity<Record> getNotificationByDeviceId(@PathVariable String deviceId) {
		Record record = recordServiceDB.findRecordByDeviceId(deviceId);
		return new ResponseEntity<>(record, null, HttpStatus.OK);
	}

	@GetMapping("/getnotification/{id}")
	@Timed
	public ResponseEntity<Record> getNotificationById(@PathVariable String id) {
		Record record = recordServiceDB.findRecordById(id);
		return new ResponseEntity<>(record, null, HttpStatus.OK);
	}

	@PostMapping("/insertrecords")
	@Timed
	public ResponseEntity<Record> insertRecord(@Valid @RequestBody RecordRequestBody recordRequestBody)
			throws URISyntaxException {

		Record record = recordService.populateRecord(recordRequestBody);

		if (null != record) {
			return ResponseEntity.created(new URI("/insertrecords" + record.getDeviceId())).headers(HeaderUtil
					.createAlert("A user is created with identifier " + record.getDeviceId(), record.getDeviceId()))
					.body(record);
		} else {
			return ResponseEntity.badRequest()
					.headers(HeaderUtil.createFailureAlert(ENTITY_NAME, "Issue Found", "Not able to add")).body(null);
		}

	}

}
